{
  "title": "[入門/再入門]サボるために学ぶDocker/Docker Compose",
  "closed": false,
  "archived": false,
  "created_at": "2021-03-14",
  "comments": [
    {
      "author": "kumamoto",
      "created_at": "2021-03-14",
      "body_markdown": "![](https://storage.googleapis.com/zenn-user-upload/k60u2exhticj3gj83046xdepddws)\n\n# Dockerの基礎知識\n\n## Dockerとは\n**Docker**とは『コンテナを使用してアプリケーションの作成、デプロイ、実行を容易にするために設計されたツール』です。\n\n**コンテナ(container)** を使うと、『開発者は、アプリケーションに必要なライブラリやその他の依存関係などのパーツをすべてパッケージ化して、1つのパッケージとしてデプロイすることができます。』\n\nコンテナは **イメージ(image)** と呼ばれるコンテナの元から [**Docker Engine**](https://docs.docker.jp/engine/index.html) を使って作成します。\n\n※参考：[What is Docker? opensource.com](https://opensource.com/resources/what-docker)\n\n「上記の説明、なんのこっちゃ。。。」という方でもわかるようにまとめました。\n\n## Docker何がいい？ その１ 「独立した環境を作ることが出来る！」\n簡単に言えば**Docker**は**コンテナ**という独立した環境を用意してやるためのツールです。\n\nサーバーは用途に応じてWebサーバー(Apache、Nginxなど)やデータベース管理システム(MySQL、PostgreSQL、MariaDBなど)などのミドルウェアのインストールや各種設定を行います。\n\nこういったサーバーで複数のソフトウェアを同居させていて、 **あるソフトウェアをアップデートしたときに別のファイルも使用している共有のソフトウェアまでアップデートされてしまい不具合が生じる** ことがあります。\n\nこういった事象を防ぐために **コンテナという独立した箱を複数用意してやり、それぞれごとにソフトウェアをインストール/設定** してやれば良いというのがDockerのアイデアです。\n\nまた通常はサーバー1台の上に載せられるWebサーバーは1つですがコンテナ上のWebサーバーであれば複数(独立した環境で)同居させて動かす事ができます。\n\n## Docker何がいい？ その２ 「環境を簡単に作成/共有出来る！」\n\nDockerは\nこうしたコード化されたファイルを共有することで、どこでも **誰でも同じ環境が作ることが出来ます。** \nまたスクラップ＆ビルドが容易に出来るので **簡単に環境の変更についてテストすることも可能** です。\n\nまた開発サーバーでDockerを用いて作った環境はで本番サーバーに簡単に持っていくことが出来ます。\n\n## Dockerどう動いているのか？\n###  仮想化技術：ホストOS型(VirtualBox、VMWare)\nAWSのEC2はVirtualBoxやVMWareと同じ仮想化環境で動いています。\n### 仮想化技術：コンテナ型(Docker)\n\n### 補足：MacやWindows上ではどう動いているのか\n(VirtualboxやVMwareのように)仮想環境にLinuxのシェル(Linuxのコア)を入れて動かしている。\nDockerはカーネルを共有して各ディストリビューションごとのプログラムを提供するだけなので。\n\n## イメージとコンテナ\n**イメージ** は金型のようなもの。プログラマー向けに言うならOOP(オブジェクト指向)のクラスのようなものです。\n一方で **コンテナ** はその金型から出来た製品。OOPの世界のインスタンスです。\n\n金型(クラス)から製品(インスタンス)がいくらでも出来るようにイメージ一つから同じコンテナをいくらでも作ることが出来ます。\n\nまた逆にコンテナからイメージを作ることも出来ます！(製品から逆算して金型を作るようなものですね。)\n**既存のコンテナに少し手を加えたい** という時に **コンテナから作ったイメージにそれを反映させて再度コンテナを作り直す** ということも出来ます。\n\n### コンテナのライフサイクル\nコンテナの **ライフサイクル** とは(1)作成(2)起動(3)停止(4)破棄、という一連の流れを指します。\n\nコンテナは基本「使い捨て」する。コンテナは上で説明した性質から、複数同時稼働させることが多い。これをいちいち1つづつ保守していると手間がかかる。そこで古いコンテナは次々と使い捨てし、新しいイメージからコンテナを作成して乗り換えていくわけです。\n\nちなみにコンテナを捨ててもデータを残せるようにホスト(物理的なマシン)のディスクに[マウント](https://e-words.jp/w/%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88.html#:~:text=IT%E3%81%AE%E5%88%86%E9%87%8E%E3%81%A7%E3%81%AF%E3%80%81%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF,%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%8C%E3%81%82%E3%82%8B%E3%80%82)しそこに保存するようにします。こうすることで他のコンテナともデータを共有することも出来るようになります。(使い捨てのコンテナと一緒に消したくないファイルやデータは気をつけて管理しよう！)\n\n## Docker Hub\n[**Docker Hub**](https://hub.docker.com/) は公式のDockerレジストリ(Dockerイメージを一元管理するためのリポジトリサービス)です。\n\nイメージは基本的にDocker Hubから手に入れる。イメージを1から作るということは初級者が行うことはほぼない。(Docker Hubにあるイメージのバリエーションでほぼ事足りるので。)\n\n\n\n\n\n",
      "body_updated_at": "2021-03-16"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-03-16",
      "body_markdown": "# Dockerを使う\n## Docker for Macのインストール\nDocker for Macは仮想環境(HyperKit)がLinuxカーネル\nP.42 No.55",
      "body_updated_at": "2021-03-16"
    }
  ]
}