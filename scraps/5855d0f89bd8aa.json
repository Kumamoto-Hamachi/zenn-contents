{
  "title": "Flaskについて忘れがちなことをメモ",
  "closed": false,
  "archived": false,
  "created_at": "2021-04-09",
  "comments": [
    {
      "author": "kumamoto",
      "created_at": "2021-04-25",
      "body_markdown": "# Modelとマイグレート\n[Flask-SQLAlchemy設定](https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/)\n## マイグレーション\nプログラムのコードからDBにテーブルを作成・編集すること\n\n# マイグレーション、基本の流れ 前半戦\n(0)インストールとディレクトリ構成\n(1)DBの設定を記載しているファイルを設定\n(2)DBの設定\n(3)テーブル定義の設定\n(4)テーブルの作成、データ挿入\n\n## (0)インストールとディレクトリ構成\n```\n$ pip install flask-sqlalchemy\n$ pip install flask-migrate\n\n$ tree\n.\n├── main.py\n├── models\n│   ├── crud.py\n│   ├── data.sqlite\n│   └── model.py\n└── templates\n```\n\n### (1)DBの設定を記載しているファイルを設定\n\n```\n-- ターミナル \n$ export FLASK_APP = myapp.py\n$ set FLASK_APP = myapp.py\n\n#(1)migrantionsフォルダ作成、マイグレーションに必要なファイルを格納。\n$ flask db init \n#(2)テーブルの設定を記載したファイルの内容をmigirationsディレクトリに反映。(modelsディレクトリの中で)\n$ flask db migrate -m \"some message\" \n#(3)migrationsディレクトリの内容をDBに登録。\n$ flask db upgrade \n```\n\n### (2)DBの設定\n`models/model.py`にて設定\n\n```\n# DBの接続の設定\nimport os\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\nbase_dir = os.path.dirname(__file__)  # このmodel.pyを配置しているディレクトリのパス\n\n# DB接続設定\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///\" + os.path.join(base_dir, \"data.sqlite\")\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n```\n\n### (3)テーブル定義の設定\n`models/model.py`にて設定\n\n```\n# DBインスタンス作成\ndb = SQLAlchemy(app)\n\n# table定義設定\nclass Person(db.Model):\n\n    __tablename__ = \"person\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.Text)\n    age = db.Column(db.Integer)\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"id = {self.id}, name={self.name}, age={self.age}\"\n```\n\n### (4)テーブルの作成、データ挿入\n`models/crud.py`にて設定\n\n```\nfrom model import db, Person\n\ndb.create_all()\nman1 = Person(\"Taro\", 18)\nman2 = Person(\"Jiro\", 17)\nman3 = Person(\"Saburo\", 16)\n\ndb.session.add_all([man1, man2])  # 複数追加\ndb.session.add(man3)  # 1つ追加\ndb.session.commit()\nprint(man1, man2, man3)\n```\n\nここまで準備したら一度` python crud.py`してみる。\n`data.sqlite`ができているので接続して確認。\n\n# マイグレーション、基本の流れ 中盤戦\n(5)マイグレーションによるテーブルの追加/修正\n\n```\n$ tree\n.\n├── crud.py\n├── migrate_model.py\n├── migrations\n│   ├── README\n│   ├── __pycache__\n│   │   └── env.cpython-38.pyc\n│   ├── alembic.ini\n│   ├── env.py\n│   ├── script.py.mako\n│   └── versions\n│       ├── 398f7d8a60bb_add_person.py\n│       ├── 488614879966_add_gender_to_person.py\n└── model.py\n\n```\n\n### (5)マイグレーション応用 その1 DBの初期化\n\n```\n$ export FLASK_APP=migrate_model.py\n```\n\nをした上で`migrate_model.py`(`model.py`のコピー)に下記を追加。\n※前半戦では説明のためにmodel.pyを作成したがこれからはこのmigrateファイルを最初から作って使用するスタイルにしよう！\n\n```\nfrom flask_migrate import Migrate\ndb_uri = \"sqlite:///\" + os.path.join(base_dir, \"migrate_data.sqlite\")  # ここにmigrateした結果を反映\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = db_uri\n\nMigrate(app, db)\n```\n\n上記追加後、`flask db init`をすると、`migrations`というディレクトリが生成されている。\n\nここまででDBの初期化は完了しているのでこれから`migrations/versions`ディレクトリにテーブルに追加したい内容が記載されたマイグレーションファイルをドシドシ入れていく。\n\n### (6)マイグレーション応用 その2 マイグレーションファイル追加\n\n```\n$ flask db migrate -m \"add Person\"  # -mより後ろがコメント(modelsディレクトリの中で)\n```\n\nそうすると`versions`ディレクトリの中に下記のようなPythonファイルが作成されている。\n\n\n```\n\"\"\"add Person\n\nRevision ID: 31c3c3613994\nRevises: \nCreate Date: 2021-05-05 22:35:48.568240\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '31c3c3613994'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('person',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.Text(), nullable=True),\n    sa.Column('age', sa.Integer(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('person')\n    # ### end Alembic commands ###\n```\n\n注目すべきはupgrade関数とdowngrade関数。\n今回はupgradeに書かれている内容を反映する。\n\n```\n$ flask db upgrade\n```\n\n反映後にはDBにalembic_versionテーブルが追加されている。\nここには現在のマイグレーションのバージョンが記録されている。\n\n```\n.tables\nalembic_version  person\n```\n\n### (7)マイグレーション応用 その3 カラムの新規追加/ダウングレード\n\nカラムを追加してやる。これを反映してやろう。\n\n```\ngender = db.Column(db.Text)  # 新規カラム\n```\n\nさらに再度これをマイグレーションファイルに反映してやる。\n\n```\n$  flask db migrate -m \"add gender to Person\"\n```\n\n\nalembic_versionの確認やテーブル定義の確認で更新されているか観てみよう。\n\n※sqlite3だとflask db downgradeだときびしい〜。\n\n# マイグレーション、基本の流れ 終盤戦\n### (8)カラムの制約\n![](https://storage.googleapis.com/zenn-user-upload/kqil90ifwroczqkpkoskfj273iiu)\n\n",
      "body_updated_at": "2021-05-11"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-04-09",
      "body_markdown": "# ルーティング\n## endpoint\nBasically, the \"endpoint\" is an identifier that is used in determining what logical unit of your code should handle the request. Normally, an endpoint is just the name of a view function. However, you can actually change the endpoint, as is done in the following example.\n要は関数名のこと\n```\n# 指定したエンドポイントでURLを作成する\n<a href={{ url_for(関数名) }}>New Page</a>\n```\n\n## エラーハンドリング\n### `errorhandler`を使用\n```\n@app.errorhandler(404)\ndef page_not_found(e):\n   return render_template('404.html'), 404\n```\n\n### `abort`で指定したstatusでのHTTPException発生\n```\nabort(404) # 404エラー発生\n```\n\n### `redirect`で別のURLにクライアントをリダイレクトさせる\n```\nreturn redirect(url_for('info', variable='man')) # infoにリダイレクトさせる\n```",
      "body_updated_at": "2021-04-11"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-04-11",
      "body_markdown": "## templates\n### templatesの代わりに別のディレクトリを指定したい\n\n```\napp = Flask(__name__, template_folder=\"template2\")\n```\n\n### Jinjaのかっこ\n\n```\n{{}}：変数\n{##}：コメント文\n{%%}：if、for文などの制御文\n```\n\n### [templateの継承](https://flask.palletsprojects.com/en/1.1.x/patterns/templateinheritance/)\ntemplate間でまとめた機能を共有して使えるようにする\n\n- block\n\n```\n{% extends \"base.html\" %}\n{% block title %}Home {{ super() }}{% endblock %}\n{% block content %}\n    <h1>Hello from Flask: {{ login_user.get(\"name\") }}({{ login_user.get(\"age\") }})さんがログインしました</h1>\n{% endblock %}\n\n```\nTemplate inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines blocks that child templates can override.\n\n### templatesのfilter自作\n```\n- app.py\n@app.template_filter(\"my_filter\"):\n    def my_filter_function(s):\n        return xxx\n\n- html file\n{{ variable | my_filter }} # 追加したfilterの適用\n```\n\n\n### [Jinjaのフィルター](https://jinja.palletsprojects.com/en/2.11.x/templates/#list-of-builtin-filters)\n![](https://storage.googleapis.com/zenn-user-upload/996h50d773nkm2dz3mevqp6mq66r)\n\n```\n--　文書全体\n{% filter upper %}\n    This text becomes uppercase\n{% endfilter %}\n\n-- \n{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}\n{% set key, value = call_something() %}\n\n{{ variable | filter }}\n\n```",
      "body_updated_at": "2021-04-11"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-04-16",
      "body_markdown": "## Form\nKeywords：ログイン画面、データ入力画面、サイトへのファイルアップロード、wtforms\n=>こちらの[Githubリポジトリ参考](https://github.com/Kumamoto-Hamachi/flask_form_practice)に\n\n## まずは基礎から\n\n```\nfrom flask import request\n\n- request.args.get()\n- request.form.get()\n\n\n# 関数が対応するリクエストを指定(デフォルトはGETのみ)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\n\n# テスト\n- request.full_path\n- request.method # GET or POST\n- request.args\n\n\n```\n\n## ファイルアップロード\nwerkzeug：WSGIユーティリティーライブラリー。WSGIはwebサーバーとAPサーバーを繋ぐインターフェイス。\n\n```\n<input type=\"file\" name=\"file\">\n\nfile = request.files[\"file\"]\nsave_filename = secure_filename(file.filename)\nfile.save(file_path)\n\nfrom werkzeug.utils import secure_filename\nsecure_filename()：ファイル名を適切な形に変換\n※(../../a.jpgみたいな意地悪な名前のファイルだと誤った場所に保存されてしまう。)\npip install pykakasi\n\nos.path.join('./static/image', filename_var)\n```\n\n### pykakasi\n\n```\nimport pykakasi\n\nif __name__ == \"__main__\":\n    kakasi = pykakasi.kakasi()\n    kakasi.setMode(\"H\", \"a\")  # ひらがな\n    kakasi.setMode(\"K\", \"a\")  # カタカナ\n    kakasi.setMode(\"J\", \"a\")  # 漢字\n    conv = kakasi.getConverter()\n    ans = conv.do(\"日本\")\n    print(\"ans\", ans)  # debug\n```\n\n### wtformでもっと楽に安全なFormを作る その1\n\n```\n$ pip install wtforms\n\nfrom wtforms.form import Form\nfrom wtforms import StringField, SubmitField\n\n# セキュリティキーの設定\napp.config[\"SECRET_KEY\"] = \"ランダムな値\"\n\nclass InfoForm(Form):\n    name = StringField(\"名前は？\")\n    submit = SubmitField(\"Submit\")\n\n    {{ form.csrf_token }} <!--csrf対策-->\n    <!-- Textフィールドを作成 -->\n    {{ form.name.label }} {{ form.name() }}\n    {{ form.submit() }}\n```\n![](https://storage.googleapis.com/zenn-user-upload/fgtfoiggolqn3kfzh9y5yev7d64o)\n\n\n### CSRF(クロスサイトリクエストフォージェリ)とは\nメールやSNS、他のサイトを通じて標的となるページに強制的にリクエストを送らせて、\n掲示板の書き込み、オンラインショッピングでの注文をさせる。\n対策：(1)重要な処理の場合にはパスワードを要求(2)csrf_tokenを利用(乱数文字列で対象の掲示板、ECサイトでの繊維しか処理を受け付けないようにする)(3)CAPTCHAを利用してPGでの処理でなく人間の処理であることを保証する。\n![](https://storage.googleapis.com/zenn-user-upload/264er5rivtpn0nxv0bbzwueq619l)\n\nfrom wtforms.form import Form → class UserForm(Form):\nと\nfrom flask_wtf import FlaskForm → class UserForm(FlaskForm):\nの質問\n=>flask_wtfは、wtformsを使いやすい形にカスタマイズして使いやすくしたもの\n=>srfのチェックは、wtformsの場合は、実装をしなければいけませんが、flask_wtfは初めから用意\n\n## 課題\nサインアップ、ログイン、ログアウト\n名前、年齢、学部(selectで)、性別(radioで)、メッセージ(textareaで)\n\n### wtformでもっと楽に安全なFormを作る その2\n- [macroについて](https://www.python.ambitious-engineer.com/archives/789)\n- [テンプレートの中のフォーム](https://msiz07-flask-docs-ja.readthedocs.io/ja/latest/patterns/wtforms.html#forms-in-templates)\n\n- macroを定義する\n```\n{% macro render_field(field) %}\n<dt>{{ field.label }} </dt>\n<dd>{{ field(**kwargs)|safe }} </dd>\n{% endmacro %}\n```\n\n- macroを使う\n```\n{% from \"_form_helpers.html\" import render_field %}\n```\n\n- sessionとform.validateを使う\n```\n@app.route(\"/adv\", methods=[\"GET\", \"POST\"])\ndef register():\n    form = UserForm(request.form)\n    if request.method == \"POST\" and form.validate():\n        session[\"name\"] = form.name.data\n        session[\"age\"] = form.age.data\n        session[\"birthday\"] = form.birthday.data\n        session[\"gender\"] = form.gender.data\n        session[\"major\"] = form.major.data\n        session[\"nationality\"] = \"日本人\" if form.is_japanese.data else \"外国人\"\n        session[\"message\"] = form.message.data\n        return redirect(url_for(\"show_user\"))\n    return render_template(\"user_regist.html\", form=form)\n```\n# fieldについてさらに\n### テキストボックスの長さの変更\n\n```\n{{ form.field(size=○○) }}\nfieldは例えばnameとか合うものをいれる\n-- render_fileldを使うなら下記\n{{ render_field(form.field, size=○○) }}\n```\n\n### デフォルト値\n```\nname = StringField(\"名前：\", default=\"Flask太郎\")\nmajor = SelectField(u\"専攻: \", choices = [(\"bungaku\", \"文学\"), \n        (\"hougaku\", \"法学部\"), (\"rigaku\", \"理学\")], default=\"rigaku\")\n\n```\n\n### チェックボックスでデフォルトチェックする\n```\n{{ form.field(checked=True) }}\n{{ render_field(form.field, checked=True) }}\n```\n\n### プレースホルダー\nrender_kw(\"placeholder\":\"yyyy/mm/dd\")\n```\nbirthday = DateField(\"誕生日: \", format=\"%Y/%m/%d\", render_kw(\"placeholder\":\"yyyy/mm/dd\"))\n```\n\n### クラスの追加(idも同じように追加出来る)\n```\n{{ form.field(class=○○) }}\n{{ render_field(form.field, class=\"class_name\") }}\n```\n\n### widgetの変更\n```\nname = StringField(\"名前:\", widget=TextArea())  # textからtextareaに変更\nimport wtforms.widgets\n```\n\n# formのバリデーションをもっと\n![](https://storage.googleapis.com/zenn-user-upload/1osu08jcqth7xx3kob49ch7vj6fr)\n\n## 単体のバリデーターの自作\n```\n# クラス外のvalidate関数はvalidatorsのリスト内で指定\ndef validate_second_name2(form, field):  # 自作関数(今回はnanashiとあった場合にエラーを返す)\n    if field.data == \"nanashi2\":\n        raise ValidationError(\"その名前も利用できないずら\")\n\nclass UserForm(Form):  # 簡単にvalidateが出来て便利！\n    second_name = StringField(\"セカンドネーム: \", validators=[DataRequired(\"データを入れろよ\"), validate_second_name2])\n\n    # クラス内での自作validate関数(validate_fieldと同じ名前で自動で適用される！)\n    def validate_second_name(self, field):  # 自作関数(今回はnanashiとあった場合にエラーを返す)\n        if field.data == \"nanashi\":\n            raise ValidationError(\"その名前は利用できません\")\n\n```\n\n## 複数のバリデーターの自作とフラッシュメッセージの表示\n```\n    # 複数のバリデーターの自作(flashも使うよ！)\n    def validate(self):\n        if not super().validate():  # 既存のvalidateをチェック\n            return False\n        today = date.today()\n        birthday = self.birthday.data\n        birthday_of_this_age = birthday.replace(year=birthday.year + self.age.data)\n        if 0 <= (today - birthday_of_this_age).days <= 365:\n            return True\n        else:\n            flash(\"年齢と誕生日が一致しません\")\n            return False\n\n```\n\nテンプレートの中はこう\n```\n{% for message in get_flashed_messages() %}\n\t<p>{{ message }}</p>\n{% endfor %}\n```",
      "body_updated_at": "2021-04-25"
    }
  ]
}