{
  "title": "HTML/CSS/JSザザッと復習",
  "closed": false,
  "archived": false,
  "created_at": "2021-03-11",
  "comments": [
    {
      "author": "kumamoto",
      "created_at": "2021-03-11",
      "body_markdown": "# HTML用語整理\n## タグ(tag)とエレメント(element)\n### エンプティーエレメント(empty element)\n## ケースセンシティブ(case sensitive)\n大文字小文字どちらでも良いが小文字推奨\n## アトリビュート(attribute)\nクオート(\"\")なくてもいいけど推奨\n### style attribute\n```\n<h1 style=\"font-size:60px;\">Heading 1</h1>\n```\n### title attribute\nThe value of the title attribute will be displayed as a tooltip when you mouse over the element.\n## ヘディング(heading)\nUsers often skim a page by its headings. It is important to use headings to show the document structure.\n## パラグラフ(paragraph)\n## ホリゾンタルルール(horizontal)\n## スタイル(style)\nアトリビュートの一種\n```\n<tagname style=\"property:value;\">\n```\n## テーブル\n```\n<table style=\"width:100%\">\n  <tr>\n    <th>Firstname</th>\n    <th>Lastname</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>50</td>\n  </tr>\n</table>\n```\n\n## リスト ulとol、dl\ndlはdescription list\n```\n<dl>\n    <dt>Coffee</dt>\n    <dd>- black hot drink</dt>\n    <dt>Milk</dt>\n    <dd>- white cold drink</dd>\n</dl>\n```\n\n## [Block elementとInline Element](https://www.w3schools.com/html/html_blocks.asp)\n2つのdisplayの値。\n「block」の特徴\n- 常に新しい行から\n- 常に利用可能な幅いっぱいに配置されます(ただし幅を指定出来る)\n- トップとボトムのmarginを持つ。(インラインにはない)\n\n「inline」の特徴\n- 新しい行から始まらない\n- エレメントは必要分しか幅を取らない(内容に合わせる。幅指定は出来ない)\n\n## Classとid\nclassは.\nidは\\#\n\n## Iframes\nwebページの中にwebページを表示する。\n```\n<iframe src=\"demo_iframe.htm\" height=\"200\" width=\"300\" title=\"Iframe Example\"></iframe>\n```\n\n## Headエレメントの中のエレメント\n<title><style><link><script><base><meta>\n=><base>と<meta>について補足\n### [<base>](https://www.w3schools.com/html/tryit.asp?filename=tryhtml_head_base)\nThe <base> element specifies the base URL and/or target for all relative URLs in a page.\nThe <base> tag must have either an href or a target attribute **present** , or both.\n### <meta>\n下記が主なmetaタグ\n```\n<meta charset=\"UTF-8\">\n# Define keywords for search engines:\n<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n# Define a description of your web page\n<meta name=\"description\" content=\"Free Web tutorials\">\n# Define the author of a page\n<meta name=\"author\" content=\"Kumamoto\">\n# Refresh document every 30 seconds\n<meta http-equiv=\"refresh\" content=\"30\">\n# Setting the viewport to make your website look good on all devices\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n※補足：[viewport](https://qiita.com/ryounagaoka/items/045b2808a5ed43f96607)\nviewport = 仮想的なウインドウと考えよう\ncontent=\"width=device-width\"は仮想ウィンドウの大きさを実際のウィンドウ幅と同じにしている。\n例えばcontent=\"width=360,initial-scale=1\"とするとどんな端末でも同じ幅(360px)となる。\n\n# そこまで重要じゃないけど一応\n## ピクチャ(picture)\n複数の画像を保有。サイズによって別の画像を表示。\n\n## Emojis in HTML\nmetaはUTF-8指定。\n😄 is &#128516\n😍 is &#128525\n💗 is &#128151",
      "body_updated_at": "2021-03-17"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-03-11",
      "body_markdown": "# HTML重要事項整理\n\n## [HTML Layout Elements and Techniques](https://www.w3schools.com/html/html_layout.asp)\n![](https://storage.googleapis.com/zenn-user-upload/syacbjswq7qik6sbsk6st64a2l8c)\n\n※[sectionとarticleの違いなど](https://adluckdesign.com/ad_blog/22391/)\n\nレイアウトの主なテクニックは下記4つ\n(1)CSSフレームワーク(Bootstrapなど) 今回はパス\n(2)[Float]() `float`と`clear`プロパティを使用するだけ。\n```\nnav{\n    float:left;\n    width: 30%;\n    height: 300px;\n    background: #ccc;\n    padding: 20px;\n}\n\narticle{\n    float: left;\n    padding: 20px;\n    width: 70%;\n    background-color: #f1f1f1;\n    height: 300px;\n}\n\nsection::after{\n    content: \"\";\n    display:table;\n    clear:both;\n}\n```\n(3)[Flexbox](https://www.w3schools.com/html/tryit.asp?filename=tryhtml_responsive_media_query3)によるレイアウト\n```\nnav{\n    -webkit-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n    background: #ccc;\n    padding: 20px;\n}\n\narticle{\n    -webkit-flex: 3;\n    -ms-flex: 3;\n    flex: 3;\n    background-color: #f1f1f1;\n    padding: 10px;\n}\n```\n(4)Grid",
      "body_updated_at": "2021-03-18"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-03-11",
      "body_markdown": "# CSS用語整理\n## セレクター(selector)とプロパティ(property)、ディクレアレーション(declaration/宣言)\n![](https://storage.googleapis.com/zenn-user-upload/2rr747zxfjnvm4wjny2jp81vcah6)\n\n## 背景画像\n背景画像はリビートする\n```\n<style>\ndiv {\n  background-image: url('img_girl.jpg');\n  background-repeat:no-repeat;\n}\n</style>\n```\n背景画像をリピートしない、エレメント全体に指定する。\n```\n<style>\nbody {\n  background-image: url('img_girl.jpg');\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  /* 100% 100% でもおｋ; */\n}\n</style>\n```",
      "body_updated_at": "2021-03-15"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-03-15",
      "body_markdown": "# CSS重要事項\n## [CSSボックスモデル](https://www.youtube.com/watch?v=z582Z6dENGA&t=0s)\n- Content-box\n内容\n- Padding box\nコンテントと枠の余白\n- Margin box\n親の要素との間\n- マージンの相殺\n(A、Bが並んでいて、Aがmargin-bottom20px、Bがmargin-bottom30pxなら50pxにならず大きい方の30pxが採用される。)\n- Border box\n枠線、border-topとかにすると枠線上だけにつけたり出来る。\n- box-sizingプロパティ\nbox-sizingプロパティは「要素の幅（width）と高さ（height）の中にpaddingとborderを含めるかどうか」の設定に用いられる。直感的に扱うにはborder-boxとする。(paddingとborderを含めてくれる。)\n※参考：[ボックスモデル/MDN](https://developer.mozilla.org/ja/docs/Learn/CSS/Building_blocks/The_box_model)\n```\nhtml {\n  box-sizing: border-box;\n}\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n```\n\n## ブロックボックスとインラインボックス\n※参考：[ブロック要素とインライン要素](http://www.htmq.com/htmlkihon/005.shtml)\n※参考：[【基礎知識】ブロックレベル要素・インライン要素の性質と違い](https://www.itra.co.jp/webmedia/block-inline-difference.html)\n\n簡単にまとめると、、、\n\n- インライン 例：<span>タグ\n横並びにしたいとき、横幅/縦幅の指定が出来ない！\n→display: block;としてやればインライン要素であってもブロック要素のように振る舞ってくれる！(inlineでインラインのように振舞う)\nインラインはmargin,padding,borderが来た時に他の要素を無視してかかるので基本はかけない。\n- ブロック 例：<div>タグ\n縦に配置したい時、横幅/縦幅の指定が出来る\n- diplay\ninline どんな時でも横並び、縦横の幅指定は無視\nblock どんな時でも縦並び、縦横の幅指定反映\ninline-block：基本は横並び(正確には違うか？)だが縦横の幅反映\n\n![](https://storage.googleapis.com/zenn-user-upload/mo19jkei9cjkf538ls8stxx0n69g)\n[フレックスボックスとグリット、どちらを使うべき？](https://coliss.com/articles/build-websites/operation/css/grid-for-layout-flexbox-for-components.html)\n## [Flexbox](https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Flexbox)\n```\n#hoge_class{\n    display: flex;\n    justify-content:center;\n}\n```\n### justify-content 横の並び方を調整(アイテムを水平方向に並べる)\nflex-start: アイテムはコンテナーの左側に並びます。\nflex-end: アイテムはコンテナーの右側に並びます。\ncenter: アイテムはコンテナーの中央に並びます。\nspace-between: アイテムはその間に等しい間隔を空けて表示されます。\nspace-around: アイテムはその周囲に等しい間隔を空けて表示されます。\n\n### aligh-items 垂直に並べる\nflex-start: アイテムはコンテナーの上部に並びます。\nflex-end: アイテムはコンテナーの下部に並びます。\ncenter: アイテムはコンテナーの垂直方向中央に並びます。\nbaseline: アイテムはコンテナーのベースラインに表示されます。\nstretch: アイテムはコンテナーの大きさに合うよう広がります。\n\n### align-self 個別のアイテムへ設定\norderと組み合わせ重要\n\n### flex-direction コンテナー内でアイテムが配置される方向を決定(グルグルまわす〜)\nrow: アイテムは文章と同じ方向に配置されます。\nrow-reverse: アイテムは文章と逆の方向に配置されます。\ncolumn: アイテムは上から下に向かって配置されます。\ncolumn-reverse: アイテムは下から上に向かって配置されます。\n\n### order 順番の指定(0がdefault？)\n\n### flex-wrap アイテムを強制的に一行に並べるか複数行にするか\nflex-wrapとflex-directionをショートハンドにしたflex-flowもよく使われる。\nnowrap: 全てのアイテムは、ひとつの行にフィットします。\nwrap: アイテムは他の行へ折り返します。\nwrap-reverse: アイテムは逆順になって他の行へ折り返します。\n\n### align-content 複数の行が他の行とどう距離を取り広がるのかを指定\nflex-start: 行はコンテナーの上側に詰められます。\nflex-end: 行はコンテナーの下側に詰められます。\ncenter: 行はコンテナーの中央に詰められます。\nspace-between: 行はその間に等しい間隔を空けて表示されます。\nspace-around: 行はその周囲に等しい間隔を空けて表示されます。\nstretch: 行はコンテナーに合うよう引き延ばされます。\nnowrap: 全てのアイテムは、ひとつの行にフィットします。\nwrap: アイテムは他の行へ折り返します。\nwrap-reverse: アイテムは逆順になって他の行へ折り返します。\n\n## [レスポンシブデザイン](https://www.w3schools.com/html/html_responsive.asp)\n```\n基本\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n画面いっぱい\n<img src=\"img_girl.jpg\" style=\"width:100%;\">\n元の画像の大きさいっぱい\n<img src=\"img_girl.jpg\" style=\"max-width:100%;height:auto;\">\n```\n※メディアの大きさによって画像を変えるmediaアトリビュートはパス\n\n### レスポンシブなテキストサイズ\n- **vw** \nviewport widthの略。1vw = 1% of viewport width\n※ % の場合は対象となる要素のプロパティが親要素のそれと紐付けられるため、必ずしもビューポートの幅が基準になるとは限りません。\n- [**メディアクエリ**](https://www.w3schools.com/html/html_responsive.asp)\n画像やテキストのサイズを動的に変える。例は上記リンクを参考に\n\n",
      "body_updated_at": "2021-03-18"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-03-18",
      "body_markdown": "# JS 特にDOM周り\n## innerHTML\n```\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n```\n\n## attribute関連\n```\ndocument.getElementById(\"demo\").style.fontSize = \"25px\";\ndocument.getElementById(\"demo\").style.color = \"red\";\ndocument.getElementById(\"demo\").style.backgroundColor = \"yellow\";\ndocument.getElementById(\"image\").src = \"picture.gif\";\n```"
    },
    {
      "author": "kumamoto",
      "created_at": "2021-03-18",
      "body_markdown": "HTML Responsive Web Design\nvw、calc、tarsnformあたりが使えるようになってくると、基本的にはどんなレイアウト・デバイス（限度はありますが、、）でも崩さずに表示できるようになってくる\nhttps://qiita.com/takamoso/items/c44956b7dfc9155cbd86",
      "body_updated_at": "2021-03-18"
    }
  ]
}