{
  "title": "mycliやPyMySQLの使い方〜",
  "closed": false,
  "archived": false,
  "created_at": "2020-12-02",
  "comments": [
    {
      "author": "kumamoto",
      "created_at": "2020-12-02",
      "body_markdown": "# mycli\n\n- pipでインストール\n```\n$ pip install mycli\n```\n- mycliでローカルのMariadbに繋ぐ\n```\n//MariaDB\n$ mysql(mariadb) -uroot  -p(passoword) (db_name)\n$ mycli -uroot -h127.0.0.1 -p(passoword) (db_name)\n//configファイル(mariadbの立ち上げ終わってから出来る)\n$ ~/.myclirc\n```\n\n- MariaDBの起動\n```\n$ mysql.server start\n$ mysql.server stop\n```\n\n- MariaDBのポート番号確認\n```\n$ sudo mariadb\nMariaDB[(none)]> show variables like 'port';\n```\n\n- ユーザーを追加/権限確認/一覧取得\n```\n-- 追加\n$ CREATE USER ユーザ名 IDENTIFIED BY 'パスワード';\n$ CREATE USER saru@localhost IDENTIFIED BY 'monkey';\n-- 削除\n$ DROP USER 'kumamoto'@'localhost';\n--権限確認\n$ SHOW GRANTS FOR 'saru'@'localhost';\n--一覧取得\n$ SELECT Host, User, authentication_string FROM mysql.user;\n```\n\n- DBやテーブルを作る\n```\n-- DB作成\n$ CREATE DATABASE IF NOT EXISTS DBネーム;\n-- table作成\n$ CREATE TABLE IF NOT EXISTS テーブル名(\nTableID INT NOT NULL PRIMARY KEY AUTOINCREMENT,\n);\n\n-- DB一覧表示\n$ SHOW DATABASES;\n-- table一覧表示\n$ SHOW TABLES FROM データベース名;\n-- tableのField columnを一覧表示\n$ DESCRIBE テーブル名;\n```\n\n- テーブルに挿入\n\n- テーブルの列の制約を変更\n```\nALTER TABLE my_items CHANGE old_id new_id INT PRIMARY KEY;\n//add NOT NULL\nALTER TABLE my_items CHANGE old_price new_price INT NOT NULL;\n//remove NOT NULL(field is not removed)\nALTER TABLE my_items CHANGE old_price new_price INT;\n```\n",
      "body_updated_at": "2020-12-03"
    },
    {
      "author": "kumamoto",
      "created_at": "2020-12-06",
      "body_markdown": "# SQLAlchemy その1\n# エンジン\n\n## [DB-API](https://blog.amedama.jp/entry/2015/10/17/154243)\nPython でリレーショナルデータベースを操作するために定義された API の仕様\nRDBごとにまちまちな書き方。\n\n## SQLAlchemy\nDB操作フレームワーク\n肝はコネクション管理とSQL式のフレームワーク\n\n### バージョン確認\n```\n>>> import sqlalchemy\n>>> sqlalchemy.__version__\n'1.3.20'\n```\n\n※値のエスケープはDB-APIの役目\n※[参考：PlaySQLAlchemy: SQLAlchemy入門](https://www.slideshare.net/YasushiMasuda/playsqlalchemy-sqlalchemy)\n![](https://storage.googleapis.com/zenn-user-upload/fc6ru94ypoc2t4vg8frrnhm0kdz6)\n\n| 用語 | 説明 |\n| ---- | ---- | \n| エンジン(Engine) | DB接続を管理 |\n| SQL式(SQL Expression) | SQLをPythonの式で |\n| マッパー(mapper) | DBレコードをPythonオブジェクトに対応付ける仕組み |\n| ダイアレクト(Dialect) | DBバックエンドごとの違い(方言)を表現する仕組み |\n\n### エンジン\n```\nfrom sqlalchemy import create_engine\nDB = \"mysql+pymysql\"\nUSER = \"root\"\nPW = \"HOGEHOGE\"\nHOST = \"localhost\"\nPORT = \"3306\"\nDB_NAME = \"twitter_like\"\nCONNECT_STR = f\"{DB}://{USER}:{PW}@{HOST}:{PORT}/{DB_NAME}\"\n# Create engine\nengine = create_engine(CONNECT_STR, echo=True)\n```\n\nちなみに上記のengineの中身を確認していくと...\n```\n# str(engine)\nprint(str(engine))\nEngine(mysql+pymysql://root:***@localhost:3306/twitter_like)\n\n# help(engine)\nhelp(engine)\n# dir(engine)\nengine_info = dir(engine)\nfor x in dir(engine_info):\n    print(x, \":\", type(eval(\"engine_info.\"+x)))\n```\n\n- エンジンを使ってクエリを実行\n```\nengine = create_engine(CONNECT_STR)\nquery = \"SELECT * FROM members LIMIT 2\"\n\n# そのまま\nres = engine.execute(query)\nprint(res)\n<sqlalchemy.engine.result.ResultProxy object at 0x109d4fa90>\nfor user_set in res:\n    print(user_set)\n\n\n# dirにして\nres = dir(engine.execute(query))\nfor x in dir(res):\n    print(x, \":\", type(eval(\"res.\"+x)))\n\n\n# list(1レコード1タプルのリストに)\nres = list(engine.execute(query))\n\n# ResultProxyにアクセス\n# SQLAlchemy execute() return ResultProxy as Tuple,\nres = engine.execute(query)\nfor user_set in res:\n    print(user_set.name) # カラム名のアトリビュート\n\nres = list(engine.execute(query))\nfor user_set in res:\n    print(user_set[1]) # 2番目のカラム\n\nres = list(engine.execute(query))\nfor user_set in res:\n    print(user_set['name']) # 辞書でのアクセス\n# その他\nres.fetchall() # for文全回しと同じ結果\nres.fetchone() \n# list(res)の一つ目のタプルと同じ結果\n# 何度もやるとその分だけ次の行に！\nres.fetchmany() \n# fetchoneと似てるがリストに囲まれて出てくる\n\n# insert\nengine = create_engine(CONNECT_STR)\nquery = 'INSERT INTO members (name, email, password, created) '\\\n        'VALUES (\"ヘンリー6世\", \"henry6@example.com\", \"fuga\", \"2020-12-6\")'\nres = engine.execute(query)\nprint(res.rowcount) # 更新した行を返す\n\n# update\nengine = create_engine(CONNECT_STR)\nquery = \"UPDATE members \" \\\n        \"SET name='ヘンリー8世' WHERE id=9;\"\nprint(\"query\", query)  # debug\nres = engine.execute(query)\nprint(res.rowcount) # 更新した行を返す\n```\n\n### パラメタクエリを使う\n- まずはBadな例から\n```\n# これだとインジェクションが出来てしまう...\nengine = create_engine(CONNECT_STR)\nparam = 1\nquery = f\"SELECT * FROM members WHERE id={param}\";\nres = engine.execute(query).fetchall()\nprint(res)\n\n# こんなふうにすれば(;ﾟдﾟ)ｧ....\nparam = \"1 or True\"\n# こんなことされたら...おわた＼(^o^)／\nparam = \"0 union select password from staff\"\n```\n\n- これなら安心(?TODO)\n```\n# SELECT * FROM Members WHERE id=1 LIMIT 1;\nparam = \"1 or True\"\nSession = sessionmaker(bind=engine)\nsession = Session()\nitem_1 = session.query(Members).filter_by(id=param).first()\nprint(item_1)\n```\n\n### トランザクションを使う(TODO)\nwith句を使って...\n```\nwith engine.begin() as conn:\n    conn.execute(\"UPDATE ...\")\n    conn.rollback？\n```\n\n\n\n\n- \n\n\n\n",
      "body_updated_at": "2020-12-07"
    },
    {
      "author": "kumamoto",
      "created_at": "2020-12-06",
      "body_markdown": "# SQLAlchemy その2 生SQLっぽく書きたい！(前節で使った関数で)\n# SQL文\n\n## 46〜48読めてない\n\n- SELECT name FROM members\n```\nfrom sqlalchemy.sql import select, text\n# Create engine\nengine = create_engine(CONNECT_STR)\n# SELECT name FROM members;\nquery = select([text(\"name\")], from_obj=text(\"members\"))\nres = engine.execute(query).fetchall()\nprint(res)\n```\n\n- textを使わない\n```\nfrom sqlalchemy.sql import select, column, table\n\n# Create engine\nengine = create_engine(CONNECT_STR)\n# SELECT name FROM members;\nquery = select([column(\"name\")], from_obj=table(\"members\"))\nres = engine.execute(query).fetchall()\nprint(res)\n```\n\n- カラムとテーブルを結びつける\n```\nmembers = table(\"members\",\n                column(\"id\"),\n                column(\"name\"),\n                column(\"email\"),\n                column(\"password\"),\n                column(\"picture\"),\n                column(\"created\"),\n                column(\"modified\"),\n                )\n# SELECT id, name FROM members\nquery = select([members.c.id, members.c.name])\nres = engine.execute(query).fetchall()\nprint(res)\n```\n\n- SELECT * FROM members WHERE id > test_id;\n```\n\"\"\"\nSELECT * FROM members\n\"\"\"\ntest_id = 4\nquery = select([members]).where(members.c.id > test_id)\nres = engine.execute(query).fetchall()\nprint(res)\n```\n\n- SELECT name FROM members WHERE id > 3;\n- SELECT name FROM members WHERE id = 3;\n```\n# Create engine\nengine = create_engine(CONNECT_STR)\nquery = select([column(\"name\")], from_obj=table(\"members\"), whereclause=(column(\"id\")>3))\nres = engine.execute(query).fetchall()\nprint(res)\n```\n\n- これも同様にカラムとテーブルを結びつける\n```\nparam = 3\nquery = select([members.c.id, members.c.name],\n        whereclause=(members.c.id>param))\n\nquery = select([members.c.id, members.c.name],\n        whereclause=(members.c.id==param))\nres = engine.execute(query).fetchall()\nprint(res)\n\nquery =select([members.c.name]).where(members.c.id>param)\nres = engine.execute(query).fetchall()\nprint(res)\n```\n\n## generativeインターフェイス\n- [generativeインターフェイスとは何か？](https://stackoverflow.com/questions/10021899/what-is-a-generative-method?stw=2)\n\n```\nengine = create_engine(CONNECT_STR)\nmembers = table(\"members\",\n                column(\"id\"),\n                column(\"name\"),\n                column(\"email\"),\n                column(\"password\"),\n                column(\"picture\"),\n                column(\"created\"),\n                column(\"modified\"),\n                )\nquery = members.select(members.c.id>3)\nres = engine.execute(query).fetchall()\nprint(res)\n\n# これもおk\nquery = members.select().where(members.c.id>3)\nres = engine.execute(query).fetchall()\nprint(res)\n# こうすれば1番目のnameにアクセスもできまっせ\nprint(res[0][\"name\"])\n\n# order_byね\nquery = members.select(members.c.id>3).order_by(members.c.name)\nres = engine.execute(query).fetchall()\nfor i in res:\n    print(i.id, i[\"name\"])\n\n# order_by desc\nfrom sqlalchemy import desc\nquery = members.select(members.c.id>3).order_by(desc(members.c.id))\n\n# テーブル結合を表現\n\"\"\"\nSELECT members.id, members.name, posts.message FROM members \nINNER JOIN posts on members.id = posts.id\n\"\"\"\nposts = table(\"posts\",\n        column(\"id\"),\n        column(\"message\"),\n        column(\"member_id\"),\n        column(\"reply_post_id\"),\n        column(\"created_at\"),\n        column(\"created\"),\n        column(\"modified\"),\n        )\non = (members.c.id == posts.c.id)\nj = members.join(posts, onclause=on)\nprint(j) # members JOIN posts ON members.id = posts.id\nquery = select([members.c.id, members.c.name, posts.c.message]).where(members.c.id==1)\nrep = engine.execute(query).fetchall()\nprint(rep)\n\n\n\n```\n※ちなみに[desc](https://docs.sqlalchemy.org/en/13/core/sqlelement.html#sqlalchemy.sql.expression.desc)に説明あるぞ！\n\n# まとめ\n- table()やcolumn()を使ってテーブルやカラムを表せる\n- カラム定義月でtbl=table(...)を作ると、tbl.c.colnameでカラムオブジェクトにアクセス出来る\n- colnameと何かを比較すると条件式オブジェクトになる\n- select()にカラム(やテーブル)の列を指定するとSELECT文を表すオブジェクトになる\n- select()やテーブルのメソッドを呼び出してgenerativeに色を作れる\n- engine.execute(sql式)でクエリを実行できる",
      "body_updated_at": "2020-12-14"
    },
    {
      "author": "kumamoto",
      "created_at": "2020-12-07",
      "body_markdown": "# SQLAlchemy その3\n# スキーマ定義\n# 58ページ目からみるように\n\n- table()やcolumn()との違い\n**テーブルやスキーマの属性を設定できる**\nカラムのデフォルト値とか、インデックスとか制約とか定義に基づいてCREATE TABLE出来る！\n\n- クエリを書くだけならいらない？\n基本のSQL式より書きやすいよ！\nORM使うときにいるよ！\n\n\n"
    }
  ]
}